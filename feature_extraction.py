import re
import pandas
import pickle
import numpy as np
import glob
import heapq
import operator
from apk import APK
import matplotlib.pyplot as plt
import os
import commands
import json
import pickle
import pprint

count=0
joinedlist=[]
slistt=[]
for filepath in glob.iglob("/home/aman/kans/test_folder/*"):
    # count+=1;
    # if count>1:
    #     break
    # print filepath
    f= open(filepath,"r")
    lst=f.read()
    lst=eval(lst)

    print lst
    # data=myfile.read().replace('\n','')
    data = ""
    while 1:
        line = f.readline()
        line.encode('ascii', 'ignore')
        if not line: break
        data += line
    data.encode('ascii','ignore')
    strin = data.replace('[','')
    stri = strin.replace(']',',')
    stri=stri.replace('\n',',')
    stri= "".join(stri.split())
    stri= stri.replace('\'','')
    # stri = re.sub(r'\s+', '', stri)
    stri=stri[:-1]
    slist=stri.split(',')
    b={}
    slistt = slistt+lst
    # print slistt
    for item in slistt:
        b[item]=b.get(item,0) + 1    # counting frequency of each item
    b.pop('',None)
    b.pop('None',None)
    sorted_b = heapq.nlargest(50,b,key=b.get)
    # sorted_values= dict(sorted(b.iteritems(),key=operator.itemgetter(1),reverse=True)[:50])
    joinedlist = joinedlist+sorted_b
    new=[]
    fun=[]
    # for i in b:
    #     new.append(i)
    #     fun.append(b[i])
    # print new
    # print fun
    # print len(new)


joinedlist= list(set(joinedlist))
print joinedlist
finaldict={}
gooddict={}
maldict={}
for i in joinedlist:
    finaldict[i]=[0,0]
    gooddict[i]=0
    maldict[i]=0

count=0
good_count=0
for filepath in glob.iglob('/home/aman/ANDROID_GOODWARE/*'):  # copy all goodware apps to Documents/apks and then run this
    # print filepath

    currentlist=[]
    apk_path = filepath
    try:
        apkf = APK(apk_path)
        currentlist= apkf.get_main_activity()
        if(isinstance(currentlist,basestring)):
            currentlist= [str(currentlist)]
        currentlist= list(set(currentlist))

        for i in currentlist:
            key = i
            if key in gooddict:
                gooddict[key] += 1


        good_count+=1
        print good_count
    except:
        continue;
    # now for intents
    actions = []
    categories = []
        #print(filepath)

    count+=1
    print count
    #print count/5000.0,count
    # os.system("java -jar ApkParser.jar -apk "+filepath)
    #print apkf.deviceId()
    # x = commands.getoutput("java -jar /home/aman/apkparser/libs/ApkParser.jar -apk "+filepath)
    # # print x
    # if x[0:4]=="java":
    #     continue
    #
    # try:
    #     temp = json.loads(x)
    # except:
    #     continue
    #
    # for key,value in temp.iteritems():
    #     if key=="activities"or key=="launchers":
    #         for d in value:
    #             for key1,val1 in d.iteritems():
    #                 if key1=="intentFilter":
    #                     for key2,val2 in val1.iteritems():
    #                         if key2=="actions":
    #                             for d2 in val2:
    #                                 if "name" in d2:
    #                                     actions.append(str(d2["name"]))
    #                         if key2=="categories":
    #                             for d2 in val2:
    #                                 if "name" in d2:
    #                                     categories.append(str(d2["name"]))
    #
    # actions = actions + categories
    # currentlist = actions
    # currentlist= list(set(currentlist))
    # for i in currentlist:
    #     keyy = i
    #     if keyy in maldict:
    #         gooddict[keyy]+=1

mal_count=0
count=0
for filepath in glob.iglob('/home/aman/ANDROID_MALWARE/*'):
    currentlist=[]
    apk_path = filepath
    try:
        apkf = APK(apk_path)
        currentlist= apkf.get_main_activity()
        if(isinstance(currentlist,basestring)):
            currentlist= [str(currentlist)]
        currentlist= list(set(currentlist))
        # print currentlist
        for i in currentlist:
            key = i
            if key in maldict:
                maldict[key]+=1

        mal_count+=1
        print mal_count
    except:
        continue;

    actions = []
    categories = []
        #print(filepath)

    count+=1
    print count
    #print count/5000.0,count
    # os.system("java -jar ApkParser.jar -apk "+filepath)
    #print apkf.deviceId()
    # x = commands.getoutput("java -jar ApkParser.jar -apk "+filepath)
    # if x[0:4]=="java":
    #     continue
    #
    # try:
    #     temp = json.loads(x)
    # except:
    #     continue
    #
    # for key,value in temp.iteritems():
    #     if key=="activities"or key=="launchers":
    #         for d in value:
    #             for key1,val1 in d.iteritems():
    #                 if key1=="intentFilter":
    #                     for key2,val2 in val1.iteritems():
    #                         if key2=="actions":
    #                             for d2 in val2:
    #                                 if "name" in d2:
    #                                     actions.append(str(d2["name"]))
    #                         if key2=="categories":
    #                             for d2 in val2:
    #                                 if "name" in d2:
    #                                     categories.append(str(d2["name"]))
    #
    # actions = actions + categories
    # currentlist = actions
    # currentlist= list(set(currentlist))
    # for i in currentlist:
    #     keyy = i
    #     if keyy in maldict:
    #         maldict[keyy]+=1
for i in joinedlist:
    finaldict[i]=[gooddict[i],maldict[i]]
    # print i,finaldict[i]
with open("intdents.txt","wb") as f:
    pickle.dump(finaldict,f)

# with open("activities.txt","rb") as f:
#     new_dict= pickle.load(f)
print "good"
print good_count
print "now_malware"
print mal_count
X= np.arange(len(gooddict))
ax= plt.subplot(111)
ax.bar(X,gooddict.values(),width=0.3,color='b',align='center')
ax.bar(X-0.2,maldict.values(), width=0.3, color='r', align='center')
ax.legend('Goodware','Malware')
plt.xticks(X,gooddict.keys())
locs,labels= plt.xticks()
plt.setp(labels,rotation=90)
plt.title("Intents",fontsize=14)
plt.legend(['Goodware','Malware'])
plt.savefig('intentds.png')
plt.savefig('intendts.pdf')


# plt.bar(range(len(gooddict)),gooddict.values(),align='center')
# plt.xticks(range(len(gooddict)),list(gooddict.keys()))
# plt.show()
print len(finaldict)
